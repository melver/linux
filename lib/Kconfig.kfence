# SPDX-License-Identifier: GPL-2.0-only

config HAVE_ARCH_KFENCE
	bool

config HAVE_ARCH_KFENCE_STATIC_POOL
	bool
	help
	  If the architecture supports using the static pool.

menuconfig KFENCE
	bool "KFENCE: low-overhead sampling-based memory safety error detector"
	depends on HAVE_ARCH_KFENCE && !KASAN && (SLAB || SLUB)
	depends on JUMP_LABEL # To ensure performance, require jump labels
	select STACKTRACE
	help
	  KFENCE is low-overhead sampling-based detector for heap out-of-bounds
	  access, use-after-free, and invalid-free errors. KFENCE is designed
	  to have negligible cost to permit enabling it in production
	  environments.

	  See <file:Documentation/dev-tools/kfence.rst> for more details.

	  Note that, KFENCE is not a substitute for explicit testing with tools
	  such as KASAN. KFENCE can detect a subset of bugs that KASAN can
	  detect (therefore enabling KFENCE together with KASAN does not make
	  sense), albeit at very different performance profiles.

if KFENCE

config KFENCE_SAMPLE_INTERVAL
	int "Default sample interval in milliseconds"
	default 100
	help
	  The KFENCE sample interval determines the frequency with which heap
	  allocations will be guarded by KFENCE. May be overridden via boot
	  parameter "kfence.sample_interval".

config KFENCE_NUM_OBJECTS
	int "Number of guarded objects available"
	default 255
	range 1 65535
	help
	  The number of guarded objects available. For each KFENCE object, 2
	  pages are required; with one containing the object and two adjacent
	  ones used as guard pages.

config KFENCE_FAULT_INJECTION
	int "Fault injection for stress testing"
	default 0
	depends on EXPERT
	help
	  The inverse probability with which to randomly protect KFENCE object
	  pages, resulting in spurious use-after-frees. The main purpose of
	  this option is to stress-test KFENCE with concurrent error reports
	  and allocations/frees. A value of 0 disables fault injection.

endif # KFENCE
